{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sortPredictions","a","b","probability","detectFaces","asyncToGenerator","regenerator_default","mark","_callee","detectionsWithExpressions","detectionForSize","customBox","wrap","_context","prev","next","console","log","faceapi","videoRef","withFaceExpressions","sent","detection","width","clientWidth","height","clientHeight","expressions","sort","canvasRef","box","x","y","expression","toString","withScore","setState","stop","getStreamFromCamera","_callee2","mediaStream","_context2","navigator","mediaDevices","getUserMedia","constraints","srcObject","intervalHr","undefined","audio","video","state","bestPrediction","_this2","react_default","createElement","className","ref","autoPlay","concat","toFixed","setInterval","clearInterval","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a340d66.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as faceapi from \"face-api.js\";\nimport \"../styles/App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.intervalHr = undefined;\n\n    this.videoRef = undefined;\n    this.canvasRef = undefined;\n    this.constraints = { audio: false, video: { width: 1280, height: 720 } };\n\n    this.state = {\n      detectionsWithExpressions: undefined,\n      bestPrediction: undefined\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"wrapper\">\n            <div className=\"video-container\">\n              <video ref={ref => (this.videoRef = ref)} autoPlay />\n              <canvas ref={ref => (this.canvasRef = ref)} />\n            </div>\n          </div>\n\n          <div>\n            {this.state.detectionsWithExpressions && (\n              <div>\n                <span>\n                  {`Expression: ${\n                    this.state.detectionsWithExpressions.expressions[0]\n                      .expression\n                  } - ${(\n                    this.state.detectionsWithExpressions.expressions[0]\n                      .probability * 100\n                  ).toFixed(2)} %`}\n                </span>\n              </div>\n            )}\n          </div>\n        </header>\n      </div>\n    );\n  }\n\n  async componentDidMount() {\n    await faceapi.loadSsdMobilenetv1Model(\"/models\");\n    await faceapi.loadFaceExpressionModel(\"/models\");\n    await this.getStreamFromCamera();\n    this.intervalHr = setInterval(this.detectFaces, 3000);\n  }\n\n  sortPredictions = (a, b) => {\n    if (a.probability > b.probability) return -1;\n    if (b.probability > a.probability) return 1;\n    return 0;\n  };\n\n  detectFaces = async () => {\n    console.log(\"detecting faces...\");\n    const detectionsWithExpressions = await faceapi\n      .detectSingleFace(this.videoRef)\n      // .withFaceLandmarks()\n      .withFaceExpressions();\n    if (detectionsWithExpressions) {\n      const detectionForSize = faceapi.resizeResults(\n        detectionsWithExpressions.detection,\n        { width: this.videoRef.clientWidth, height: this.videoRef.clientHeight }\n      );\n\n      detectionsWithExpressions.expressions = detectionsWithExpressions.expressions.sort(\n        this.sortPredictions\n      );\n\n      this.canvasRef.height = this.videoRef.clientHeight;\n      this.canvasRef.width = this.videoRef.clientWidth;\n\n      const customBox = new faceapi.BoxWithText(\n        new faceapi.Rect(\n          detectionForSize.box.x,\n          detectionForSize.box.y,\n          detectionForSize.box.width,\n          detectionForSize.box.height\n        ),\n        detectionsWithExpressions.expressions[0].expression.toString()\n      );\n      // Draw on canvas\n      faceapi.drawDetection(this.canvasRef, customBox, {\n        withScore: true\n      });\n\n      this.setState({ detectionsWithExpressions });\n    }\n  };\n\n  getStreamFromCamera = async () => {\n    const mediaStream = await navigator.mediaDevices.getUserMedia(\n      this.constraints\n    );\n\n    // Show the stream from the default camera\n    this.videoRef.srcObject = mediaStream;\n    console.log(\"stream has started\");\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.intervalHr);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}